// This executable line of code has functions that applies different filters to a picture


#include "helpers.h"

#include <math.h>



// Convert image to grayscale

void grayscale(int height, int width, RGBTRIPLE image[height][width])

{
//define variable
    float rgbs_grey;



    for (int i = 0; i < width; i++)

    {

        for (int j = 0; j < height; j++)

        {

            // make sure the red, green, and blue values are all the same value.

            rgbs_grey = round((image[j][i].rgbtBlue + image[j][i].rgbtGreen + image[j][i].rgbtRed) / 3.000);



            image[j][i].rgbtBlue = rgbs_grey;

            image[j][i].rgbtGreen = rgbs_grey;

            image[j][i].rgbtRed = rgbs_grey;

        }

    }

}



// stops maximum value at 255 to prevent stack overflow of memory

int limit(int RGB)

{

    if (RGB > 255)

    {

        RGB = 255;

    }

    return RGB;

}



// Convert image to sepia

void sepia(int height, int width, RGBTRIPLE image[height][width])

{
//define variables
    int sepia_blue;

    int sepia_red;

    int sepia_green;

    for (int i = 0; i < width; i++)

    {

        for (int j = 0; j < height; j++)

        {

            sepia_blue = limit(round(0.272 * image[j][i].rgbtRed + 0.534 * image[j][i].rgbtGreen + 0.131 * image[j][i].rgbtBlue));

            sepia_green = limit(round(0.349 * image[j][i].rgbtRed + 0.686 * image[j][i].rgbtGreen + 0.168 * image[j][i].rgbtBlue));

            sepia_red = limit(round(0.393 * image[j][i].rgbtRed + 0.769 * image[j][i].rgbtGreen + 0.189 * image[j][i].rgbtBlue));



            image[j][i].rgbtBlue = sepia_blue;

            image[j][i].rgbtGreen = sepia_green;

            image[j][i].rgbtRed = sepia_red;

        }

    }

}



// Reflect image horizontally

void reflect(int height, int width, RGBTRIPLE image[height][width])

{

    //use of a temporary array to swap values

    int temp[3];

    for (int j = 0; j < height; j++)

    {

        for (int i = 0; i < width / 2; i++)

        {

            temp[0] = image[j][i].rgbtBlue;

            temp[1] = image[j][i].rgbtGreen;

            temp[2] = image[j][i].rgbtRed;



            // swap pixels with the ones on the opposite side of the picture and vice-versa

            image[j][i].rgbtBlue = image[j][width - i - 1].rgbtBlue;

            image[j][i].rgbtGreen = image[j][width - i - 1].rgbtGreen;

            image[j][i].rgbtRed = image[j][width - i - 1].rgbtRed;



            image[j][width - i - 1].rgbtBlue = temp[0];

            image[j][width - i - 1].rgbtGreen = temp[1];

            image[j][width - i - 1].rgbtRed = temp[2];

        }

    }

}



// Blur image

void blur(int height, int width, RGBTRIPLE image[height][width])

{
//define variables
    int sum_blue;

    int sum_green;

    int sum_red;

    float counter;

    //create a temporary table of colors.

    RGBTRIPLE temp[height][width];



    for (int i = 0; i < width; i++)

    {

        for (int j = 0; j < height; j++)

        {

            sum_blue = 0;

            sum_green = 0;

            sum_red = 0;

            counter = 0.00;



            // sums values of the pixel and 8 neighboring ones, skips iteration if it goes outside the pic

            for (int k = -1; k < 2; k++)

            {

                if (j + k < 0 || j + k > height - 1)

                {

                    continue;

                }



                for (int h = -1; h < 2; h++)

                {

                    if (i + h < 0 || i + h > width - 1)

                    {

                        continue;

                    }



                    sum_blue += image[j + k][i + h].rgbtBlue;

                    sum_green += image[j + k][i + h].rgbtGreen;

                    sum_red += image[j + k][i + h].rgbtRed;

                    counter++;

                }

            }



            // averages the sum to make picture look blurrier
            //giving it a new value by averaging the color values of neighboring pixels

            temp[j][i].rgbtBlue = round(sum_blue / counter);

            temp[j][i].rgbtGreen = round(sum_green / counter);

            temp[j][i].rgbtRed = round(sum_red / counter);

        }

    }



    //copy values from temporary table

    for (int i = 0; i < width; i++)

    {

        for (int j = 0; j < height; j++)

        {

            image[j][i].rgbtBlue = temp[j][i].rgbtBlue;

            image[j][i].rgbtGreen = temp[j][i].rgbtGreen;

            image[j][i].rgbtRed = temp[j][i].rgbtRed;

        }

    }

}
